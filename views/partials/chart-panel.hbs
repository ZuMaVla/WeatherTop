<section class="box" style="background-color: rgba(255, 255, 255, 0.66)">
  <p class="title is-5"><b>Tip:</b> Use buttons below to control archive data chart.</p>

  {{#each stations}}                    
    <div>
      <a href="/station/{{_id}}?chart=temperature" class="button chartCtrl is-danger" >Temperature</a>
      <a href="/station/{{_id}}?chart=wind" class="button chartCtrl is-info">Wind</a>
      <a href="/station/{{_id}}?chart=pressure" class="button chartCtrl is-warning">Pressure</a>
      <a href="/station/{{_id}}?chart=none" class="button chartCtrl">Hide Chart</a>
    </div>
  {{/each}}

  <div class="box mb-5" style="width: 60%; margin: 0 auto; {{visibility}}">
    <canvas id="myChart"></canvas>
  </div>
</section>


<!--******************************************* Script for chart plotting using functionality of Chart.js**************************************************-->

<script>
  const dataX = [{{#each time}}{{this}},{{/each}}]; // Composing array of numbers for X-values
  const dataY = [{{#each data}}{{this}},{{/each}}]; // Composing array of numbers for Y-values

  const chartBody = document.getElementById('myChart').getContext('2d');   // Retrieves canvas prepared for chart and interprets it as a 2D "workspace"

  const data = {
    labels: dataX,                                                         // X-values: time in hours from now
    datasets: [{
      label: '{{toDisplayData}}',
      data: dataY,                                                         // Y-values (temperature, pressure or wind speed) corresponding to the X-values
      backgroundColor: 'rgba(255, 255, 255, 0.2)',
      borderColor: 'rgba({{rgb}}, 1)',
      borderWidth: 1,
      fill: false                                                          // Area below the curve is not to be filledr
    }]
  };

  const options = {
    scales: {
      x: {
        type: 'linear',                                                     // To display using linear scale
        title: {
          display: true,
          text: 'Time from now (hours)'                                     // Negative values mean past  
        }
      },
      y: {
        beginAtZero: false,
        title: {
          display: true,
          text: '{{toDisplayData}} ({{toDisplayUnits}})'
        }
      }
    }
  };

  const myChart = new Chart(chartBody, {                                   // Plotting of the chart using params below:
    type: 'line',                                                          // Type of curve
    data: data,                                                            // Data display as prepared above
    options: options                                                       // Chart options as prepare above
  });
</script>
